// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
)

const getUserAxie = `-- name: GetUserAxie :one
SELECT axie FROM user_axie WHERE id = $1
`

func (q *Queries) GetUserAxie(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserAxie, id)
	var axie int64
	err := row.Scan(&axie)
	return axie, err
}

const getUserBalance = `-- name: GetUserBalance :one
SELECT balance FROM user_balance WHERE id = $1
`

func (q *Queries) GetUserBalance(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserBalance, id)
	var balance int64
	err := row.Scan(&balance)
	return balance, err
}

const upsertUserAxie = `-- name: UpsertUserAxie :exec
INSERT INTO user_axie(id, axie) VALUES ($1, $2) ON CONFLICT (id)
    DO UPDATE SET axie = $2
`

type UpsertUserAxieParams struct {
	ID   string
	Axie int64
}

func (q *Queries) UpsertUserAxie(ctx context.Context, arg UpsertUserAxieParams) error {
	_, err := q.db.ExecContext(ctx, upsertUserAxie, arg.ID, arg.Axie)
	return err
}

const upsertUserBalance = `-- name: UpsertUserBalance :exec
INSERT INTO user_balance(id, balance) VALUES ($1, $2) ON CONFLICT (id)
    DO UPDATE SET balance = $2
`

type UpsertUserBalanceParams struct {
	ID      string
	Balance int64
}

func (q *Queries) UpsertUserBalance(ctx context.Context, arg UpsertUserBalanceParams) error {
	_, err := q.db.ExecContext(ctx, upsertUserBalance, arg.ID, arg.Balance)
	return err
}
